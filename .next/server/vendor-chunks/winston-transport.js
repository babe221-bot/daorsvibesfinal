"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/winston-transport";
exports.ids = ["vendor-chunks/winston-transport"];
exports.modules = {

/***/ "(action-browser)/./node_modules/winston-transport/index.js":
/*!*************************************************!*\
  !*** ./node_modules/winston-transport/index.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\n// Expose modern transport directly as the export\nmodule.exports = __webpack_require__(/*! ./modern */ \"(action-browser)/./node_modules/winston-transport/modern.js\");\n\n// Expose legacy stream\nmodule.exports.LegacyTransportStream = __webpack_require__(/*! ./legacy */ \"(action-browser)/./node_modules/winston-transport/legacy.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy93aW5zdG9uLXRyYW5zcG9ydC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBLG1IQUFvQzs7QUFFcEM7QUFDQSx5SUFBMEQiLCJzb3VyY2VzIjpbIi9ob21lL3VzZXIvc3R1ZGlvL25vZGVfbW9kdWxlcy93aW5zdG9uLXRyYW5zcG9ydC9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8vIEV4cG9zZSBtb2Rlcm4gdHJhbnNwb3J0IGRpcmVjdGx5IGFzIHRoZSBleHBvcnRcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9tb2Rlcm4nKTtcblxuLy8gRXhwb3NlIGxlZ2FjeSBzdHJlYW1cbm1vZHVsZS5leHBvcnRzLkxlZ2FjeVRyYW5zcG9ydFN0cmVhbSA9IHJlcXVpcmUoJy4vbGVnYWN5Jyk7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/winston-transport/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/winston-transport/legacy.js":
/*!**************************************************!*\
  !*** ./node_modules/winston-transport/legacy.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst util = __webpack_require__(/*! util */ \"util\");\nconst { LEVEL } = __webpack_require__(/*! triple-beam */ \"(action-browser)/./node_modules/triple-beam/index.js\");\nconst TransportStream = __webpack_require__(/*! ./modern */ \"(action-browser)/./node_modules/winston-transport/modern.js\");\n\n/**\n * Constructor function for the LegacyTransportStream. This is an internal\n * wrapper `winston >= 3` uses to wrap older transports implementing\n * log(level, message, meta).\n * @param {Object} options - Options for this TransportStream instance.\n * @param {Transpot} options.transport - winston@2 or older Transport to wrap.\n */\n\nconst LegacyTransportStream = module.exports = function LegacyTransportStream(options = {}) {\n  TransportStream.call(this, options);\n  if (!options.transport || typeof options.transport.log !== 'function') {\n    throw new Error('Invalid transport, must be an object with a log method.');\n  }\n\n  this.transport = options.transport;\n  this.level = this.level || options.transport.level;\n  this.handleExceptions = this.handleExceptions || options.transport.handleExceptions;\n\n  // Display our deprecation notice.\n  this._deprecated();\n\n  // Properly bubble up errors from the transport to the\n  // LegacyTransportStream instance, but only once no matter how many times\n  // this transport is shared.\n  function transportError(err) {\n    this.emit('error', err, this.transport);\n  }\n\n  if (!this.transport.__winstonError) {\n    this.transport.__winstonError = transportError.bind(this);\n    this.transport.on('error', this.transport.__winstonError);\n  }\n};\n\n/*\n * Inherit from TransportStream using Node.js built-ins\n */\nutil.inherits(LegacyTransportStream, TransportStream);\n\n/**\n * Writes the info object to our transport instance.\n * @param {mixed} info - TODO: add param description.\n * @param {mixed} enc - TODO: add param description.\n * @param {function} callback - TODO: add param description.\n * @returns {undefined}\n * @private\n */\nLegacyTransportStream.prototype._write = function _write(info, enc, callback) {\n  if (this.silent || (info.exception === true && !this.handleExceptions)) {\n    return callback(null);\n  }\n\n  // Remark: This has to be handled in the base transport now because we\n  // cannot conditionally write to our pipe targets as stream.\n  if (!this.level || this.levels[this.level] >= this.levels[info[LEVEL]]) {\n    this.transport.log(info[LEVEL], info.message, info, this._nop);\n  }\n\n  callback(null);\n};\n\n/**\n * Writes the batch of info objects (i.e. \"object chunks\") to our transport\n * instance after performing any necessary filtering.\n * @param {mixed} chunks - TODO: add params description.\n * @param {function} callback - TODO: add params description.\n * @returns {mixed} - TODO: add returns description.\n * @private\n */\nLegacyTransportStream.prototype._writev = function _writev(chunks, callback) {\n  for (let i = 0; i < chunks.length; i++) {\n    if (this._accept(chunks[i])) {\n      this.transport.log(\n        chunks[i].chunk[LEVEL],\n        chunks[i].chunk.message,\n        chunks[i].chunk,\n        this._nop\n      );\n      chunks[i].callback();\n    }\n  }\n\n  return callback(null);\n};\n\n/**\n * Displays a deprecation notice. Defined as a function so it can be\n * overriden in tests.\n * @returns {undefined}\n */\nLegacyTransportStream.prototype._deprecated = function _deprecated() {\n  // eslint-disable-next-line no-console\n  console.error([\n    `${this.transport.name} is a legacy winston transport. Consider upgrading: `,\n    '- Upgrade docs: https://github.com/winstonjs/winston/blob/master/UPGRADE-3.0.md'\n  ].join('\\n'));\n};\n\n/**\n * Clean up error handling state on the legacy transport associated\n * with this instance.\n * @returns {undefined}\n */\nLegacyTransportStream.prototype.close = function close() {\n  if (this.transport.close) {\n    this.transport.close();\n  }\n\n  if (this.transport.__winstonError) {\n    this.transport.removeListener('error', this.transport.__winstonError);\n    this.transport.__winstonError = null;\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy93aW5zdG9uLXRyYW5zcG9ydC9sZWdhY3kuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsYUFBYSxtQkFBTyxDQUFDLGtCQUFNO0FBQzNCLFFBQVEsUUFBUSxFQUFFLG1CQUFPLENBQUMseUVBQWE7QUFDdkMsd0JBQXdCLG1CQUFPLENBQUMsNkVBQVU7O0FBRTFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsVUFBVTtBQUNyQjs7QUFFQSwwRkFBMEY7QUFDMUY7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxVQUFVO0FBQ3JCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLFVBQVU7QUFDckIsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixtQkFBbUI7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPLHFCQUFxQjtBQUM1QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL2hvbWUvdXNlci9zdHVkaW8vbm9kZV9tb2R1bGVzL3dpbnN0b24tdHJhbnNwb3J0L2xlZ2FjeS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG5jb25zdCB7IExFVkVMIH0gPSByZXF1aXJlKCd0cmlwbGUtYmVhbScpO1xuY29uc3QgVHJhbnNwb3J0U3RyZWFtID0gcmVxdWlyZSgnLi9tb2Rlcm4nKTtcblxuLyoqXG4gKiBDb25zdHJ1Y3RvciBmdW5jdGlvbiBmb3IgdGhlIExlZ2FjeVRyYW5zcG9ydFN0cmVhbS4gVGhpcyBpcyBhbiBpbnRlcm5hbFxuICogd3JhcHBlciBgd2luc3RvbiA+PSAzYCB1c2VzIHRvIHdyYXAgb2xkZXIgdHJhbnNwb3J0cyBpbXBsZW1lbnRpbmdcbiAqIGxvZyhsZXZlbCwgbWVzc2FnZSwgbWV0YSkuXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIE9wdGlvbnMgZm9yIHRoaXMgVHJhbnNwb3J0U3RyZWFtIGluc3RhbmNlLlxuICogQHBhcmFtIHtUcmFuc3BvdH0gb3B0aW9ucy50cmFuc3BvcnQgLSB3aW5zdG9uQDIgb3Igb2xkZXIgVHJhbnNwb3J0IHRvIHdyYXAuXG4gKi9cblxuY29uc3QgTGVnYWN5VHJhbnNwb3J0U3RyZWFtID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBMZWdhY3lUcmFuc3BvcnRTdHJlYW0ob3B0aW9ucyA9IHt9KSB7XG4gIFRyYW5zcG9ydFN0cmVhbS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuICBpZiAoIW9wdGlvbnMudHJhbnNwb3J0IHx8IHR5cGVvZiBvcHRpb25zLnRyYW5zcG9ydC5sb2cgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgdHJhbnNwb3J0LCBtdXN0IGJlIGFuIG9iamVjdCB3aXRoIGEgbG9nIG1ldGhvZC4nKTtcbiAgfVxuXG4gIHRoaXMudHJhbnNwb3J0ID0gb3B0aW9ucy50cmFuc3BvcnQ7XG4gIHRoaXMubGV2ZWwgPSB0aGlzLmxldmVsIHx8IG9wdGlvbnMudHJhbnNwb3J0LmxldmVsO1xuICB0aGlzLmhhbmRsZUV4Y2VwdGlvbnMgPSB0aGlzLmhhbmRsZUV4Y2VwdGlvbnMgfHwgb3B0aW9ucy50cmFuc3BvcnQuaGFuZGxlRXhjZXB0aW9ucztcblxuICAvLyBEaXNwbGF5IG91ciBkZXByZWNhdGlvbiBub3RpY2UuXG4gIHRoaXMuX2RlcHJlY2F0ZWQoKTtcblxuICAvLyBQcm9wZXJseSBidWJibGUgdXAgZXJyb3JzIGZyb20gdGhlIHRyYW5zcG9ydCB0byB0aGVcbiAgLy8gTGVnYWN5VHJhbnNwb3J0U3RyZWFtIGluc3RhbmNlLCBidXQgb25seSBvbmNlIG5vIG1hdHRlciBob3cgbWFueSB0aW1lc1xuICAvLyB0aGlzIHRyYW5zcG9ydCBpcyBzaGFyZWQuXG4gIGZ1bmN0aW9uIHRyYW5zcG9ydEVycm9yKGVycikge1xuICAgIHRoaXMuZW1pdCgnZXJyb3InLCBlcnIsIHRoaXMudHJhbnNwb3J0KTtcbiAgfVxuXG4gIGlmICghdGhpcy50cmFuc3BvcnQuX193aW5zdG9uRXJyb3IpIHtcbiAgICB0aGlzLnRyYW5zcG9ydC5fX3dpbnN0b25FcnJvciA9IHRyYW5zcG9ydEVycm9yLmJpbmQodGhpcyk7XG4gICAgdGhpcy50cmFuc3BvcnQub24oJ2Vycm9yJywgdGhpcy50cmFuc3BvcnQuX193aW5zdG9uRXJyb3IpO1xuICB9XG59O1xuXG4vKlxuICogSW5oZXJpdCBmcm9tIFRyYW5zcG9ydFN0cmVhbSB1c2luZyBOb2RlLmpzIGJ1aWx0LWluc1xuICovXG51dGlsLmluaGVyaXRzKExlZ2FjeVRyYW5zcG9ydFN0cmVhbSwgVHJhbnNwb3J0U3RyZWFtKTtcblxuLyoqXG4gKiBXcml0ZXMgdGhlIGluZm8gb2JqZWN0IHRvIG91ciB0cmFuc3BvcnQgaW5zdGFuY2UuXG4gKiBAcGFyYW0ge21peGVkfSBpbmZvIC0gVE9ETzogYWRkIHBhcmFtIGRlc2NyaXB0aW9uLlxuICogQHBhcmFtIHttaXhlZH0gZW5jIC0gVE9ETzogYWRkIHBhcmFtIGRlc2NyaXB0aW9uLlxuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgLSBUT0RPOiBhZGQgcGFyYW0gZGVzY3JpcHRpb24uXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICogQHByaXZhdGVcbiAqL1xuTGVnYWN5VHJhbnNwb3J0U3RyZWFtLnByb3RvdHlwZS5fd3JpdGUgPSBmdW5jdGlvbiBfd3JpdGUoaW5mbywgZW5jLCBjYWxsYmFjaykge1xuICBpZiAodGhpcy5zaWxlbnQgfHwgKGluZm8uZXhjZXB0aW9uID09PSB0cnVlICYmICF0aGlzLmhhbmRsZUV4Y2VwdGlvbnMpKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrKG51bGwpO1xuICB9XG5cbiAgLy8gUmVtYXJrOiBUaGlzIGhhcyB0byBiZSBoYW5kbGVkIGluIHRoZSBiYXNlIHRyYW5zcG9ydCBub3cgYmVjYXVzZSB3ZVxuICAvLyBjYW5ub3QgY29uZGl0aW9uYWxseSB3cml0ZSB0byBvdXIgcGlwZSB0YXJnZXRzIGFzIHN0cmVhbS5cbiAgaWYgKCF0aGlzLmxldmVsIHx8IHRoaXMubGV2ZWxzW3RoaXMubGV2ZWxdID49IHRoaXMubGV2ZWxzW2luZm9bTEVWRUxdXSkge1xuICAgIHRoaXMudHJhbnNwb3J0LmxvZyhpbmZvW0xFVkVMXSwgaW5mby5tZXNzYWdlLCBpbmZvLCB0aGlzLl9ub3ApO1xuICB9XG5cbiAgY2FsbGJhY2sobnVsbCk7XG59O1xuXG4vKipcbiAqIFdyaXRlcyB0aGUgYmF0Y2ggb2YgaW5mbyBvYmplY3RzIChpLmUuIFwib2JqZWN0IGNodW5rc1wiKSB0byBvdXIgdHJhbnNwb3J0XG4gKiBpbnN0YW5jZSBhZnRlciBwZXJmb3JtaW5nIGFueSBuZWNlc3NhcnkgZmlsdGVyaW5nLlxuICogQHBhcmFtIHttaXhlZH0gY2h1bmtzIC0gVE9ETzogYWRkIHBhcmFtcyBkZXNjcmlwdGlvbi5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIC0gVE9ETzogYWRkIHBhcmFtcyBkZXNjcmlwdGlvbi5cbiAqIEByZXR1cm5zIHttaXhlZH0gLSBUT0RPOiBhZGQgcmV0dXJucyBkZXNjcmlwdGlvbi5cbiAqIEBwcml2YXRlXG4gKi9cbkxlZ2FjeVRyYW5zcG9ydFN0cmVhbS5wcm90b3R5cGUuX3dyaXRldiA9IGZ1bmN0aW9uIF93cml0ZXYoY2h1bmtzLCBjYWxsYmFjaykge1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGNodW5rcy5sZW5ndGg7IGkrKykge1xuICAgIGlmICh0aGlzLl9hY2NlcHQoY2h1bmtzW2ldKSkge1xuICAgICAgdGhpcy50cmFuc3BvcnQubG9nKFxuICAgICAgICBjaHVua3NbaV0uY2h1bmtbTEVWRUxdLFxuICAgICAgICBjaHVua3NbaV0uY2h1bmsubWVzc2FnZSxcbiAgICAgICAgY2h1bmtzW2ldLmNodW5rLFxuICAgICAgICB0aGlzLl9ub3BcbiAgICAgICk7XG4gICAgICBjaHVua3NbaV0uY2FsbGJhY2soKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gY2FsbGJhY2sobnVsbCk7XG59O1xuXG4vKipcbiAqIERpc3BsYXlzIGEgZGVwcmVjYXRpb24gbm90aWNlLiBEZWZpbmVkIGFzIGEgZnVuY3Rpb24gc28gaXQgY2FuIGJlXG4gKiBvdmVycmlkZW4gaW4gdGVzdHMuXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICovXG5MZWdhY3lUcmFuc3BvcnRTdHJlYW0ucHJvdG90eXBlLl9kZXByZWNhdGVkID0gZnVuY3Rpb24gX2RlcHJlY2F0ZWQoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gIGNvbnNvbGUuZXJyb3IoW1xuICAgIGAke3RoaXMudHJhbnNwb3J0Lm5hbWV9IGlzIGEgbGVnYWN5IHdpbnN0b24gdHJhbnNwb3J0LiBDb25zaWRlciB1cGdyYWRpbmc6IGAsXG4gICAgJy0gVXBncmFkZSBkb2NzOiBodHRwczovL2dpdGh1Yi5jb20vd2luc3RvbmpzL3dpbnN0b24vYmxvYi9tYXN0ZXIvVVBHUkFERS0zLjAubWQnXG4gIF0uam9pbignXFxuJykpO1xufTtcblxuLyoqXG4gKiBDbGVhbiB1cCBlcnJvciBoYW5kbGluZyBzdGF0ZSBvbiB0aGUgbGVnYWN5IHRyYW5zcG9ydCBhc3NvY2lhdGVkXG4gKiB3aXRoIHRoaXMgaW5zdGFuY2UuXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICovXG5MZWdhY3lUcmFuc3BvcnRTdHJlYW0ucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gY2xvc2UoKSB7XG4gIGlmICh0aGlzLnRyYW5zcG9ydC5jbG9zZSkge1xuICAgIHRoaXMudHJhbnNwb3J0LmNsb3NlKCk7XG4gIH1cblxuICBpZiAodGhpcy50cmFuc3BvcnQuX193aW5zdG9uRXJyb3IpIHtcbiAgICB0aGlzLnRyYW5zcG9ydC5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCB0aGlzLnRyYW5zcG9ydC5fX3dpbnN0b25FcnJvcik7XG4gICAgdGhpcy50cmFuc3BvcnQuX193aW5zdG9uRXJyb3IgPSBudWxsO1xuICB9XG59O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/winston-transport/legacy.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/winston-transport/modern.js":
/*!**************************************************!*\
  !*** ./node_modules/winston-transport/modern.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst util = __webpack_require__(/*! util */ \"util\");\nconst Writable = __webpack_require__(/*! readable-stream/lib/_stream_writable.js */ \"(action-browser)/./node_modules/readable-stream/lib/_stream_writable.js\");\nconst { LEVEL } = __webpack_require__(/*! triple-beam */ \"(action-browser)/./node_modules/triple-beam/index.js\");\n\n/**\n * Constructor function for the TransportStream. This is the base prototype\n * that all `winston >= 3` transports should inherit from.\n * @param {Object} options - Options for this TransportStream instance\n * @param {String} options.level - Highest level according to RFC5424.\n * @param {Boolean} options.handleExceptions - If true, info with\n * { exception: true } will be written.\n * @param {Function} options.log - Custom log function for simple Transport\n * creation\n * @param {Function} options.close - Called on \"unpipe\" from parent.\n */\nconst TransportStream = module.exports = function TransportStream(options = {}) {\n  Writable.call(this, { objectMode: true, highWaterMark: options.highWaterMark });\n\n  this.format = options.format;\n  this.level = options.level;\n  this.handleExceptions = options.handleExceptions;\n  this.handleRejections = options.handleRejections;\n  this.silent = options.silent;\n\n  if (options.log) this.log = options.log;\n  if (options.logv) this.logv = options.logv;\n  if (options.close) this.close = options.close;\n\n  // Get the levels from the source we are piped from.\n  this.once('pipe', logger => {\n    // Remark (indexzero): this bookkeeping can only support multiple\n    // Logger parents with the same `levels`. This comes into play in\n    // the `winston.Container` code in which `container.add` takes\n    // a fully realized set of options with pre-constructed TransportStreams.\n    this.levels = logger.levels;\n    this.parent = logger;\n  });\n\n  // If and/or when the transport is removed from this instance\n  this.once('unpipe', src => {\n    // Remark (indexzero): this bookkeeping can only support multiple\n    // Logger parents with the same `levels`. This comes into play in\n    // the `winston.Container` code in which `container.add` takes\n    // a fully realized set of options with pre-constructed TransportStreams.\n    if (src === this.parent) {\n      this.parent = null;\n      if (this.close) {\n        this.close();\n      }\n    }\n  });\n};\n\n/*\n * Inherit from Writeable using Node.js built-ins\n */\nutil.inherits(TransportStream, Writable);\n\n/**\n * Writes the info object to our transport instance.\n * @param {mixed} info - TODO: add param description.\n * @param {mixed} enc - TODO: add param description.\n * @param {function} callback - TODO: add param description.\n * @returns {undefined}\n * @private\n */\nTransportStream.prototype._write = function _write(info, enc, callback) {\n  if (this.silent || (info.exception === true && !this.handleExceptions)) {\n    return callback(null);\n  }\n\n  // Remark: This has to be handled in the base transport now because we\n  // cannot conditionally write to our pipe targets as stream. We always\n  // prefer any explicit level set on the Transport itself falling back to\n  // any level set on the parent.\n  const level = this.level || (this.parent && this.parent.level);\n\n  if (!level || this.levels[level] >= this.levels[info[LEVEL]]) {\n    if (info && !this.format) {\n      return this.log(info, callback);\n    }\n\n    let errState;\n    let transformed;\n\n    // We trap(and re-throw) any errors generated by the user-provided format, but also\n    // guarantee that the streams callback is invoked so that we can continue flowing.\n    try {\n      transformed = this.format.transform(Object.assign({}, info), this.format.options);\n    } catch (err) {\n      errState = err;\n    }\n\n    if (errState || !transformed) {\n      // eslint-disable-next-line callback-return\n      callback();\n      if (errState) throw errState;\n      return;\n    }\n\n    return this.log(transformed, callback);\n  }\n  this._writableState.sync = false;\n  return callback(null);\n};\n\n/**\n * Writes the batch of info objects (i.e. \"object chunks\") to our transport\n * instance after performing any necessary filtering.\n * @param {mixed} chunks - TODO: add params description.\n * @param {function} callback - TODO: add params description.\n * @returns {mixed} - TODO: add returns description.\n * @private\n */\nTransportStream.prototype._writev = function _writev(chunks, callback) {\n  if (this.logv) {\n    const infos = chunks.filter(this._accept, this);\n    if (!infos.length) {\n      return callback(null);\n    }\n\n    // Remark (indexzero): from a performance perspective if Transport\n    // implementers do choose to implement logv should we make it their\n    // responsibility to invoke their format?\n    return this.logv(infos, callback);\n  }\n\n  for (let i = 0; i < chunks.length; i++) {\n    if (!this._accept(chunks[i])) continue;\n\n    if (chunks[i].chunk && !this.format) {\n      this.log(chunks[i].chunk, chunks[i].callback);\n      continue;\n    }\n\n    let errState;\n    let transformed;\n\n    // We trap(and re-throw) any errors generated by the user-provided format, but also\n    // guarantee that the streams callback is invoked so that we can continue flowing.\n    try {\n      transformed = this.format.transform(\n        Object.assign({}, chunks[i].chunk),\n        this.format.options\n      );\n    } catch (err) {\n      errState = err;\n    }\n\n    if (errState || !transformed) {\n      // eslint-disable-next-line callback-return\n      chunks[i].callback();\n      if (errState) {\n        // eslint-disable-next-line callback-return\n        callback(null);\n        throw errState;\n      }\n    } else {\n      this.log(transformed, chunks[i].callback);\n    }\n  }\n\n  return callback(null);\n};\n\n/**\n * Predicate function that returns true if the specfied `info` on the\n * WriteReq, `write`, should be passed down into the derived\n * TransportStream's I/O via `.log(info, callback)`.\n * @param {WriteReq} write - winston@3 Node.js WriteReq for the `info` object\n * representing the log message.\n * @returns {Boolean} - Value indicating if the `write` should be accepted &\n * logged.\n */\nTransportStream.prototype._accept = function _accept(write) {\n  const info = write.chunk;\n  if (this.silent) {\n    return false;\n  }\n\n  // We always prefer any explicit level set on the Transport itself\n  // falling back to any level set on the parent.\n  const level = this.level || (this.parent && this.parent.level);\n\n  // Immediately check the average case: log level filtering.\n  if (\n    info.exception === true ||\n    !level ||\n    this.levels[level] >= this.levels[info[LEVEL]]\n  ) {\n    // Ensure the info object is valid based on `{ exception }`:\n    // 1. { handleExceptions: true }: all `info` objects are valid\n    // 2. { exception: false }: accepted by all transports.\n    if (this.handleExceptions || info.exception !== true) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\n/**\n * _nop is short for \"No operation\"\n * @returns {Boolean} Intentionally false.\n */\nTransportStream.prototype._nop = function _nop() {\n  // eslint-disable-next-line no-undefined\n  return void undefined;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/winston-transport/modern.js\n");

/***/ })

};
;